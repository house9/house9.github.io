<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[house9]]></title>
  <link href="http://jessehouse.com/atom.xml" rel="self"/>
  <link href="http://jessehouse.com/"/>
  <updated>2013-11-14T16:41:10-08:00</updated>
  <id>http://jessehouse.com/</id>
  <author>
    <name><![CDATA[Jesse House]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails: Timezones]]></title>
    <link href="http://jessehouse.com/blog/2013/11/15/working-with-timezones-and-ruby-on-rails/"/>
    <updated>2013-11-15T10:03:00-08:00</updated>
    <id>http://jessehouse.com/blog/2013/11/15/working-with-timezones-and-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>This article outlines some basic guidelines to follow when when working with timezones in Ruby on Rails applications. Ruby on Rails has great support for timezones, but getting it working correctly can be tricky. Following the techniques below should save you some headache.</p>

<ul>
<li>Application Settings &ndash; use the default UTC settings</li>
<li>Set each request to the logged on users timezone</li>
<li>Display times and dates using the I18n view helpers</li>
<li>Override user timezone when displaying time aware entity</li>
<li>Override user timezone when saving time aware entity</li>
<li>Filter data based on the users timezone</li>
</ul>


<blockquote><p>Is it &lsquo;time zone&rsquo;, &lsquo;timezone&rsquo; or &lsquo;time-zone&rsquo;? Both styles end up being used in rails code base <code>config.time_zone</code> and <code>config.active_record.default_timezone</code>. I use timezone in this article and time_zone in the sample code base. Read more on <a href="http://english.stackexchange.com/questions/3934/time-zone-vs-timezone">stackexchange</a>.</p></blockquote>

<p>Sample code can be found at: <a href="https://github.com/house9/sample_timez">https://github.com/house9/sample_timez</a></p>

<p>The sample includes user profiles with timezone settings, an event model, and a work schedule model. It comes with a small set of sample data as well. To set it up locally, follow the <a href="https://github.com/house9/sample_timez/blob/master/README.md">README</a> instructions.</p>

<h2>Application Settings</h2>

<p>Rails uses the following defaults for a new application</p>

<ul>
<li>Application assumes it is running in UTC</li>
<li>Database assumes it is storing data in UTC</li>
</ul>


<blockquote><p>I recommend you keep these defaults!</p></blockquote>

<h4>in rails console (default settings)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;UTC&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">default_timezone</span>
</span><span class='line'><span class="c1"># =&gt; :utc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both <em>can be</em> overriden in your application configuration file (config/application.rb) &ndash; <em>don&rsquo;t do it!</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Do NOT do this!!!</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">time_zone</span> <span class="o">=</span> <span class="s1">&#39;Central Time (US &amp; Canada)&#39;</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">default_timezone</span> <span class="o">=</span> <span class="ss">:local</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Set the timezone for each request</h2>

<p>How you determine the &lsquo;current users&rsquo; timezone will differ from application to application. In the sample code we are storing the value on the user model in a time_zone field. The sample application uses the techniques from this <a href="http://railscasts.com/episodes/106-time-zones-revised">RailsCast</a> episode. Alternatively you may  want to set it based on the client&rsquo;s browser setting.</p>

<p>Use an <code>around_filter</code> or combo of <code>before_filter</code> and <code>after_filter</code> to set each request&rsquo;s timezone in the <code>ApplicationController</code>. If we don&rsquo;t have a current user it will default to UTC.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">around_filter</span> <span class="ss">:user_time_zone</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:current_user</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">user_time_zone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Time</span><span class="o">.</span><span class="n">use_zone</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">time_zone</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Display times and dates using the I18n view helpers</h2>

<p>The <code>I18n</code> helpers are timezone aware. Aside from rendering the datetimes in the logged on users locale format, they will convert the stored UTC times to the current threads timezone.</p>

<ul>
<li><a href="http://guides.rubyonrails.org/i18n.html#adding-date-time-formats">http://guides.rubyonrails.org/i18n.html#adding-date-time-formats</a></li>
<li><a href="https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale">https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale</a></li>
</ul>


<p>On the homepage of the sample application there are numerous examples, also check out the <code>config/locales/en.yml</code> file.</p>

<p>Basic example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">created_at</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Beware: I18n.localize does not handle nil values. You will need to guard against nils for nullable columns.</p></blockquote>

<h2>Override the display of dates</h2>

<p>In the sample application we have an Event model and a WorkSchedule model. Each model has its own timezone. Events are based on where the event will actually occur. In this case displaying the dates in the users timezone makes no sense at all, so we must override the display. There are a few techniques that can be employed:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/DateTime.html#method-i-in_time_zone">in_time_zone</a> method (see work schedule in the sample application)</li>
<li><a href="http://api.rubyonrails.org/classes/Time.html#method-c-use_zone">Time.use_zone</a> blocks (see events in the sample application)</li>
</ul>


<p><code>in_time_zone</code> example: WorkSchedule overrides the start_at and end_at model attributes, therefore no special handling is needed in the views (of course you still need to use I18n.localize).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WorkSchedule</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start_at</span>
</span><span class='line'>    <span class="k">super</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="n">time_zone</span><span class="p">)</span> <span class="k">if</span> <span class="k">super</span> <span class="o">&amp;&amp;</span> <span class="n">time_zone</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">end_at</span>
</span><span class='line'>    <span class="k">super</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="n">time_zone</span><span class="p">)</span> <span class="k">if</span> <span class="k">super</span> <span class="o">&amp;&amp;</span> <span class="n">time_zone</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Time.use_zone</code> example: The Event model does <em>not</em> override start_at or end_at attributes, but uses Time.use_zone blocks in the views.</p>

<pre><code>&lt;!-- displayed times in the events timezone --&gt;
&lt;% Time.use_zone(@event.time_zone) do %&gt;
  &lt;%= l(@event.start_at) %&gt;
  &lt;%= l(@event.end_at) %&gt;
&lt;% end %&gt;
&lt;!-- now back to the logged on users timezone --&gt;
&lt;p&gt;
  Created at &lt;%= l(@event.created_at) %&gt;
  Updated at &lt;%= l(@event.updated_at) %&gt;
&lt;/p&gt;
</code></pre>

<p>There is odd behavior with Time.use_zone when doing in-memory sorting in ruby (<code>sort_by</code>). See the <code>HomeController</code> in the sample application. Ordered attributes do not convert in the use_zone block. I am not sure if this a bug or by design.</p>

<h2>Override timezone when saving data</h2>

<p>Sometimes you want to override saving data. Let&rsquo;s say my profile is set up with &lsquo;Pacific&rsquo; timezone, but I am creating an event that will occur in New York (&lsquo;Eastern&rsquo; timezone). I do <em>not</em> want rails to convert the times to &lsquo;Pacific&rsquo;. We can reset the current threads timezone to the events timezone before the create and update actions execute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EventsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_event_time_zone</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... all action code (unchanged)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_event_time_zone</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:event</span><span class="o">]</span>
</span><span class='line'>      <span class="no">Time</span><span class="o">.</span><span class="n">zone</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:event</span><span class="o">][</span><span class="ss">:time_zone</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively this could be done using <code>Time.use_zone</code> blocks in the create and update actions.</p>

<h2>Filter data based on the users timezone</h2>

<p>Rails will handle most of this automatically if you don&rsquo;t use raw sql. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">articles</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;published_at &gt; ?&quot;</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are filtering datetime data by the day be careful, the below queries are from the sample application logged in as a user with <code>(GMT+06:00) Astana</code> timezone</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># WARNING: do not do this</span>
</span><span class='line'><span class="c1"># events created yesterday</span>
</span><span class='line'><span class="n">yesterday</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">current</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span>
</span><span class='line'><span class="no">Event</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;DATE(created_at) = ?&quot;</span><span class="p">,</span> <span class="n">yesterday</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; SELECT &quot;events&quot;.* FROM &quot;events&quot; WHERE (DATE(created_at) = &#39;2013-11-14&#39;)</span>
</span><span class='line'><span class="c1"># =&gt; 0 records</span>
</span></code></pre></td></tr></table></div></figure>


<p>the proper way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># events created yesterday</span>
</span><span class='line'><span class="n">start_at</span> <span class="o">=</span> <span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">current</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">)</span><span class="o">.</span><span class="n">beginning_of_day</span>
</span><span class='line'><span class="n">end_at</span> <span class="o">=</span> <span class="n">start_at</span><span class="o">.</span><span class="n">end_of_day</span>
</span><span class='line'><span class="vi">@events_from_yesterday</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at BETWEEN ? AND ?&quot;</span><span class="p">,</span> <span class="n">start_at</span><span class="p">,</span> <span class="n">end_at</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; SELECT &quot;events&quot;.* FROM &quot;events&quot; WHERE (created_at BETWEEN &#39;2013-11-13 18:00:00&#39; AND &#39;2013-11-14 17:59:59&#39;)</span>
</span><span class='line'><span class="c1"># =&gt; 12 records</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This is not an issue when filtering on date columns (only datetime).</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails will do it for us, Date.current is timezone aware</span>
</span><span class='line'><span class="no">Meeting</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;scheduled_on = ?&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="c1"># but do NOT do this, will not work correctly at certain times of the day</span>
</span><span class='line'><span class="no">Meeting</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;scheduled_on = ?&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some situations you might need to query for data based on a specific timezone</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@corp_office</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span><span class="p">({</span> <span class="n">time_zone</span><span class="p">:</span> <span class="s2">&quot;Eastern Time (US &amp; Canada)&quot;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">use_zone</span><span class="p">(</span><span class="vi">@corp_office</span><span class="o">.</span><span class="n">time_zone</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">start_at</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">beginning_of_day</span>
</span><span class='line'>  <span class="n">end_at</span> <span class="o">=</span> <span class="n">start_at</span><span class="o">.</span><span class="n">end_of_day</span>
</span><span class='line'>  <span class="vi">@events_scheduled_today</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;start_at BETWEEN ? AND ?&quot;</span><span class="p">,</span> <span class="n">start_at</span><span class="p">,</span> <span class="n">end_at</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:start_at</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; SELECT &quot;events&quot;.* FROM &quot;events&quot; WHERE (start_at BETWEEN &#39;2013-11-13 05:00:00&#39; AND &#39;2013-11-14 04:59:59&#39;) ORDER BY &quot;events&quot;.&quot;start_at&quot; ASC</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I hope you found this article helpful. All feedback is welcome &ndash; I am sure I have left out some key information or just plain got it wrong.</p>

<p>Additional Reading: <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails</a></p>

<h2>ETC&hellip; (links and resources)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">time</span><span class="p">:</span><span class="ss">zones</span><span class="p">:</span><span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:TimeZone</span><span class="o">.</span><span class="n">zones_map</span>
</span><span class='line'><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:TimeZone</span><span class="o">.</span><span class="n">us_zones</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>API: <a href="http://api.rubyonrails.org/classes/DateTime.html">DateTime</a></li>
<li>API: <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select">time_zone_select</a></li>
<li>Stackoverflow: <a href="http://stackoverflow.com/questions/19664652/timezone-confusion-in-ruby-on-rails-4-0-postgres">Timezone confusion</a></li>
<li>Stackoverflow: <a href="http://stackoverflow.com/questions/17818329/rails-3-timezone-confusions/17840938#17840938">More timezone confusion</a></li>
<li>Postgresql: <a href="http://www.postgresql.org/docs/9.3/static/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT">AT TIME ZONE</a></li>
<li><a href="https://github.com/rails/rails/issues/9610">datetime_select preselects wrong times upon edit</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Good</span> <span class="n">naming</span> <span class="n">conventions</span> <span class="k">for</span> <span class="n">date</span> <span class="ow">and</span> <span class="n">datetime</span> <span class="p">(</span><span class="n">your</span> <span class="n">milage</span> <span class="n">may</span> <span class="n">vary</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="ss">datetime</span><span class="p">:</span> <span class="n">should</span> <span class="k">end</span> <span class="k">in</span> <span class="n">_at</span> <span class="p">(</span><span class="n">created_at</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">,</span> <span class="n">start_at</span><span class="p">,</span> <span class="n">end_at</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">date</span><span class="p">:</span> <span class="n">should</span> <span class="k">end</span> <span class="k">in</span> <span class="n">_on</span> <span class="p">(</span><span class="n">start_on</span><span class="p">,</span> <span class="n">end_on</span><span class="p">,</span> <span class="n">work_on</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cure for IBS]]></title>
    <link href="http://jessehouse.com/blog/2013/09/25/the-cure-for-ibs/"/>
    <updated>2013-09-25T16:45:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/09/25/the-cure-for-ibs</id>
    <content type="html"><![CDATA[<p>Wikipedia lists IBS (<a href="http://en.wikipedia.org/wiki/Irritable_bowel_syndrome">Irritable Bowel Syndrome</a>) as a &ldquo;Functional gastrointestinal disorder&rdquo;. It can cause both diarrhea or constipation and often alternates between the two. In short it is &ldquo;No fun&rdquo;.</p>

<p>I was first diagnosed with IBS in 2002 and was told to</p>

<ul>
<li>eat more fiber</li>
<li>take a stress reduction class</li>
</ul>


<p>I had never heard of such a thing as &lsquo;IBS&rsquo; before, it seems it is the &lsquo;catch-all&rsquo; diagnosis for stomach issues when the doctors do not know for certain what is causing the issue.</p>

<p>Things that did help me, but I would not say they &lsquo;cured&rsquo; me:</p>

<ul>
<li>reduce meat intake

<ul>
<li>replace with lentils and other legumes which are high in fiber</li>
</ul>
</li>
<li>increase cooked vegetable intake</li>
<li>eliminate dairy

<ul>
<li>this made a huge difference for me, for awhile</li>
</ul>
</li>
<li>yoga and meditation

<ul>
<li>IBS seems to be heavily linked to stress</li>
</ul>
</li>
</ul>


<p>Even after changing my diet I still had discomfort off and on. At one point in 2007 I thought my appendix was going to burst, went to the emergency room to find out my appendix was fine and that I was just really constipated. Talk about embarrassing.</p>

<p>After that I decided to try some acupuncture treatment. It did help some, but the thing that &lsquo;cured&rsquo; my IBS was the advice my acupuncturist gave me:</p>

<ul>
<li>do NOT eat while you are working on the computer</li>
<li>do NOT eat while you are driving</li>
</ul>


<p>The jist of it is when its time to eat, its time to eat and nothing else:</p>

<ul>
<li>chew your food</li>
<li>eat slowly</li>
<li>digest for at least 15 minutes before going back to work</li>
<li>maybe take a short walk while you digest</li>
<li>no reading or other mentally engaging activities</li>
</ul>


<p>Doing the above, my IBS has dwindled away, it did not happen overnight, it took many months of being very strict about my eating habits &ndash; mainly taking the time to digest after a meal before engaging in any work activities.</p>

<p>I am somewhat of a grazer, I like to eat small amounts through out the day while working. My work consists of being on the computer over 90% of my work day. Sometimes my work is stressful, even when it is not &lsquo;stressful&rsquo; it is still very engaging and involves a very high level of concentration.</p>

<p>I believe I was training my body to think it was under stress whenever I was eating, weather I was on the computer or not.</p>

<p>If you suffer from IBS I hope the above will work for you as well.</p>

<p>-Namaste</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Test]]></title>
    <link href="http://jessehouse.com/blog/2013/09/24/octopress-test/"/>
    <updated>2013-09-24T14:06:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/09/24/octopress-test</id>
    <content type="html"><![CDATA[<p>My first post using Octopress!</p>

<p>Followed the fine documenation here: <a href="http://octopress.org/docs/">http://octopress.org/docs/</a> to get up and running.</p>

<p>And used this script <a href="https://gist.github.com/juniorz/1564581">https://gist.github.com/juniorz/1564581</a> to import all of my old posts from blogger. It failed to import a few posts but overall worked great!</p>

<p>I do have various formatting issues on older posts, will need to revisit those in the future&hellip;</p>

<p>Authoring with markdown is so much better and no need for embedded gist: ya!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello Octopress&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello Octopress&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Solo (AKA: supply_drop)]]></title>
    <link href="http://jessehouse.com/blog/2013/07/06/puppet-solo-aka-supplydrop/"/>
    <updated>2013-07-06T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/07/06/puppet-solo-aka-supplydrop</id>
    <content type="html"><![CDATA[<div class='post'>
Similar to <a href="http://matschaffer.github.io/knife-solo/">knife-solo</a> for use with <a href="http://www.opscode.com/chef/">chef</a>, <a href="https://github.com/pitluga/supply_drop">supply_drop</a> allows you to provision servers using <a href="https://puppetlabs.com/">puppet</a> without the need for a puppet master server. It uses <a href="https://github.com/capistrano/capistrano">capistrano</a> for executing commands on the remote server. I put together a working sample set of puppet and supply_drop deployment scripts for&nbsp;provisioning&nbsp;a postgres server.<br /><br /><blockquote class="tr_bq">See the github repo at &nbsp;<a href="https://github.com/house9/puppet-solo-hello-world">https://github.com/house9/puppet-solo-hello-world</a></blockquote><br /><b>Resources</b><br /><br /><ul><li><a href="http://www.confreaks.com/videos/2479-railsconf2013-devops-for-the-rubyist-soul">http://www.confreaks.com/videos/2479-railsconf2013-devops-for-the-rubyist-soul</a></li><li><a href="https://speakerdeck.com/jtdowney/devops-for-the-rubyist-soul-at-rubynation-2013">https://speakerdeck.com/jtdowney/devops-for-the-rubyist-soul-at-rubynation-2013</a></li></ul><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WAL-e chef cookbook]]></title>
    <link href="http://jessehouse.com/blog/2013/06/24/wal-e-chef-cookbook/"/>
    <updated>2013-06-24T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/06/24/wal-e-chef-cookbook</id>
    <content type="html"><![CDATA[<p>Postgres has various backup and restore options</p>

<ul>
<li><a href="http://www.postgresql.org/docs/9.2/static/backup.html">http://www.postgresql.org/docs/9.2/static/backup.html</a></li>
</ul>


<p>Do you have a recovery plan in case your Postgres server crashes &ndash; your daily pg_dump is probably not going to cut it.</p>

<p>Postgres uses Write-Ahead Logging (WAL)</p>

<blockquote><p>Write-Ahead Logging (WAL) is a standard method for ensuring data integrity. A detailed description can be found in most (if not all) books about transaction processing. Briefly, WAL&rsquo;s central concept is that changes to data files (where tables and indexes reside) must be written only after those changes have been logged, that is, after log records describing the changes have been flushed to permanent storage. If we follow this procedure, we do not need to flush data pages to disk on every transaction commit, because we know that in the event of a crash we will be able to recover the database using the log: any changes that have not been applied to the data pages can be redone from the log records. (This is roll-forward recovery, also known as REDO.)</p></blockquote>

<ul>
<li>from <a href="http://www.postgresql.org/docs/9.2/static/wal-intro.html">http://www.postgresql.org/docs/9.2/static/wal-intro.html</a></li>
</ul>


<p>Setting up Continuous Archiving and Point-in-Time Recovery (PITR) for your Postgres WAL files is very complex, lucky for us the WAL-e project has simplified this process greatly. WAL-e has utilities for sending all WAL files to an AWS S3 bucket as the log files are being generated. More Information, see:</p>

<ul>
<li><a href="http://www.postgresql.org/docs/9.2/static/continuous-archiving.html">http://www.postgresql.org/docs/9.2/static/continuous-archiving.html</a></li>
<li><a href="https://github.com/wal-e/wal-e">https://github.com/wal-e/wal-e</a></li>
</ul>


<p>Recently I put together a chef cookbook which installs WAL-e on a Postgres instance, see:</p>

<ul>
<li><a href="https://github.com/house9/wal-e-cookbook">https://github.com/house9/wal-e-cookbook</a></li>
<li><a href="https://github.com/house9/use_wal_e">https://github.com/house9/use_wal_e</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant and puppet postgres 9.2 on ubuntu]]></title>
    <link href="http://jessehouse.com/blog/2013/06/11/vagrant-and-puppet-postgres-92-on-ubuntu/"/>
    <updated>2013-06-11T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/06/11/vagrant-and-puppet-postgres-92-on-ubuntu</id>
    <content type="html"><![CDATA[<div class='post'>
Some vagrant configuration to install postgres 9.2 using puppet<br /><br /><script src="https://gist.github.com/house9/5762219.js"></script><noscript>see https://gist.github.com/house9/5762219.js</noscript><br /><script src="https://gist.github.com/house9/5762236.js"></script><noscript>see https://gist.github.com/house9/5762236.js</noscript><br /><b>Resources</b><br /><br /><ul><li><a href="https://forge.puppetlabs.com/puppetlabs/postgresql">https://forge.puppetlabs.com/puppetlabs/postgresql</a></li><li><a href="https://github.com/puppetlabs/puppetlabs-postgresql">https://github.com/puppetlabs/puppetlabs-postgresql</a></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantfile for setting up multiple machines with chef configuration]]></title>
    <link href="http://jessehouse.com/blog/2013/06/01/vagrantfile-for-setting-up-multiple/"/>
    <updated>2013-06-01T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/06/01/vagrantfile-for-setting-up-multiple</id>
    <content type="html"><![CDATA[<div class='post'>
Example Vagrantfile below for setting up multiple virtual machines and using chef to provision them<br /><br /><br /><script src="https://gist.github.com/house9/5690784.js"></script><noscript>Your reader does not support javascript - please view configuration here - https://gist.github.com/house9/5690784#file-vagrantfile-multibox-chef-rb  </noscript><br />Resources<br /><br /><ul><li><a href="http://docs.vagrantup.com/v2/multi-machine/index.html">http://docs.vagrantup.com/v2/multi-machine/index.html</a>&nbsp;</li><li><a href="http://jbbarth.com/posts/2011-03-20-vagrant-provisioning-with-chefsolo.html">http://jbbarth.com/posts/2011-03-20-vagrant-provisioning-with-chefsolo.html</a>&nbsp;</li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HipChat is now free!]]></title>
    <link href="http://jessehouse.com/blog/2013/03/21/hipchat-is-now-free/"/>
    <updated>2013-03-21T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2013/03/21/hipchat-is-now-free</id>
    <content type="html"><![CDATA[<div class='post'>
Just got an email from <a href="https://www.hipchat.com/">HipChat</a> - now free for small groups - awesome!<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-5_HhmM8Ilx8/UUs5raR5bHI/AAAAAAAAC7A/IJ_-ooOZJhY/s1600/hipchat.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-5_HhmM8Ilx8/UUs5raR5bHI/AAAAAAAAC7A/IJ_-ooOZJhY/s1600/hipchat.png" /></a></div><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails continuous integration (CI) with Jenkins the easy way with Chef and Knife]]></title>
    <link href="http://jessehouse.com/blog/2013/02/23/ruby-on-rails-continuous-integration-ci/"/>
    <updated>2013-02-23T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2013/02/23/ruby-on-rails-continuous-integration-ci</id>
    <content type="html"><![CDATA[<div class='post'>
Do you need a CI build setup for your Ruby on Rails app?<br /><br />Here are some <a href="http://www.opscode.com/chef/">chef</a> / <a href="http://matschaffer.github.com/knife-solo/">knife solo</a> scripts that will deploy a <a href="http://jenkins-ci.org/">Jenkins</a> server to run your <a href="http://www.martinfowler.com/articles/continuousIntegration.html">CI build</a> - you could be up and running in less than 1/2 an hour<br /><br /><a href="https://github.com/house9/ci_chef_jenkins_rails"><b>https://github.com/house9/ci_chef_jenkins_rails</b></a><br /><br />Check out the README for details<br /><br /><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>patcon</div>
<div class='content'>
You might want to look into Pivotal Labs&#39; ciborg project &#8211; sounds like it&#39;s just what you&#39;re looking for :)<br /><br />https://github.com/pivotal/ciborg</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[> random tricks you can do with Rails]]></title>
    <link href="http://jessehouse.com/blog/2013/02/23/random-tricks-you-can-do-with-rails/"/>
    <updated>2013-02-23T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2013/02/23/random-tricks-you-can-do-with-rails</id>
    <content type="html"><![CDATA[<div class='post'>
There are bunch of really good nuggets in this presentation:<br /><br /><ul><li><a href="http://www.confreaks.com/videos/889-railsconf2012-ten-things-you-didn-t-know-rails-could-do">http://www.confreaks.com/videos/889-railsconf2012-ten-things-you-didn-t-know-rails-could-do</a>&nbsp;</li><li><a href="https://speakerdeck.com/jeg2/10-things-you-didnt-know-rails-could-do">https://speakerdeck.com/jeg2/10-things-you-didnt-know-rails-could-do</a></li></ul><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails :remote => true jQuery events]]></title>
    <link href="http://jessehouse.com/blog/2012/12/19/rails-remote-true-jquery-events/"/>
    <updated>2012-12-19T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2012/12/19/rails-remote-true-jquery-events</id>
    <content type="html"><![CDATA[<div class='post'>
I constantly find myself looking these up, saving this link for future reference<br /><br /><a href="https://github.com/rails/jquery-ujs/wiki/ajax">https://github.com/rails/jquery-ujs/wiki/ajax</a><br /><br />contains all of the rails custom jQuery events for remote forms, such as &#8220;ajax:success&#8221;, &#8220;ajax:before&#8221;; also includes the method signatures.<br /><br /><br /></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Nick</div>
<div class='content'>
It&#39;s like you opened my brain and looked right into my mind to see what I was thinking. <b><i>Woah</i></b>.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending email with Rails Mailers, The Random bits...]]></title>
    <link href="http://jessehouse.com/blog/2012/12/16/sending-email-with-rails-mailers-random/"/>
    <updated>2012-12-16T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2012/12/16/sending-email-with-rails-mailers-random</id>
    <content type="html"><![CDATA[<div class='post'>
<i>See the rails guides and railscasts for getting started with Rails Mailers;&nbsp;</i><br /><i>this article includes some additional information on Rails Mailers not included in those articles.</i><br /><br /><b>RailsCasts: </b><a href="http://railscasts.com/episodes/206-action-mailer-in-rails-3">http://railscasts.com/episodes/206-action-mailer-in-rails-3</a><br /><b>Rails Guides: </b>&#8220;<a href="http://guides.rubyonrails.org/action_mailer_basics.html">Action Mailer Basics</a>&#8221; on the rails guides -&nbsp;The guide covers all of the common mailer tasks<br /><ul><li>setup and configuration</li><li>attachments</li><li>layouts</li></ul><br /><span style="font-size: x-large;">Random Bits</span><br /><blockquote class="tr_bq"><i>These examples were created using rails 3.2</i></blockquote><div><div><span style="font-size: large;">Add importance headers</span></div><div><br /></div><div><script src="https://gist.github.com/4308619.js"></script></div><blockquote class="tr_bq"><i>NOTE: many email clients will ignore these headers</i></blockquote></div><div><br /></div><div><div><span style="font-size: large;">Add receipt header</span></div><div><br /></div><div><script src="https://gist.github.com/4308683.js"></script></div><blockquote class="tr_bq"><i>NOTE: many email clients will ignore these headers</i></blockquote></div><div><div><span style="font-size: large;"><br /></span><span style="font-size: large;">Testing mailer headers with rspec</span></div><div><br /></div><div>If you have <a href="https://github.com/rspec/rspec-rails">rspec-rails gem</a> installed with your rails application then&nbsp;running the generator will stub out most of your mailer tests, including a fixture file for the mailer view, which you may or may not want to remove.</div><div><br /></div><div><script src="https://gist.github.com/4308712.js"></script></div><blockquote class="tr_bq"><i>NOTE: test against mail.header, not mail.headers</i></blockquote></div><div><div><span style="font-size: large;"><br /></span><span style="font-size: large;">Use a different layout for some Mailer actions</span></div><div><br /></div><div>our default layout is the customer facing one&nbsp;but we want to override it in some cases</div><div><br /></div><div><script src="https://gist.github.com/4309219.js"></script></div></div><div><br /></div><div><br /></div><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a C.I. build (Continuous Integration) for a Ruby on Rails application]]></title>
    <link href="http://jessehouse.com/blog/2012/11/03/setting-up-ci-build-continuous/"/>
    <updated>2012-11-03T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/11/03/setting-up-ci-build-continuous</id>
    <content type="html"><![CDATA[<div class='post'>
<br />It has never been easier than with Semaphore - Hosted Continuous Integration<br /><br /><ul><li><a href="https://semaphoreapp.com/">https://semaphoreapp.com/</a></li></ul><br />How easy is it<br /><br /><ul><li>add semaphore ssh key to your github repo</li><li>then semaphore automatically determines your ruby version, database, etc&#8230;</li><li>you can tweak the build steps later, the defaults are pretty good</li></ul><br />It will automatically detect new branches!!! That means zero setup when the new branch is added<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-HqVYteyXvQk/UJVdSqJnYOI/AAAAAAAAC6U/AU4oP3tZ2D8/s1600/semaphoreapp-01.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="348" src="http://4.bp.blogspot.com/-HqVYteyXvQk/UJVdSqJnYOI/AAAAAAAAC6U/AU4oP3tZ2D8/s640/semaphoreapp-01.png" width="640" /></a></div><br /><br />It is not <a href="https://semaphoreapp.com/pricing">cheap</a>, for personal side projects it might not make sense?<br />But well worth the money if you are doing paid development<br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Log Formatting ]]></title>
    <link href="http://jessehouse.com/blog/2012/11/03/git-log-formatting/"/>
    <updated>2012-11-03T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/11/03/git-log-formatting</id>
    <content type="html"><![CDATA[<div class='post'>
The git log command is great and has tons of good information, but the output doesn&#8217;t give you that nice &#8216;overview&#8217; of the commit history, too much detail on too many lines<br /><br />I&#8217;ve been using the following in my .gitconfig file<br /><blockquote class="tr_bq"><span style="background-color: #cccccc;">l = log -20 &#8211;format=&#8217;%h %ad %d %an: %s&#8217; &#8211;date=short</span></blockquote>typing &#8217;<i style="background-color: #cccccc;">git l</i>&#8217; renders the following output:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-0GRyv-72haA/UJVYQ96clhI/AAAAAAAAC58/Lptn1WKW9dA/s1600/git-l-01.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="297" src="http://2.bp.blogspot.com/-0GRyv-72haA/UJVYQ96clhI/AAAAAAAAC58/Lptn1WKW9dA/s640/git-l-01.png" width="640" /></a></div><br /><br />Last night I watched the <a href="https://www.destroyallsoftware.com/">Destroy All Software</a> &#8221;<a href="https://www.destroyallsoftware.com/screencasts/catalog/pretty-git-logs">PRETTY GIT LOGS</a>&#8221; screencast which takes &#8217;<i style="background-color: #cccccc;">git l</i>&#8217; to the next level<br /><br /><ul><li><a href="https://www.destroyallsoftware.com/screencasts/catalog/pretty-git-logs">https://www.destroyallsoftware.com/screencasts/catalog/pretty-git-logs</a></li><li><a href="https://github.com/garybernhardt/dotfiles/blob/master/.gitconfig">https://github.com/garybernhardt/dotfiles/blob/master/.gitconfig</a></li><li><a href="https://github.com/garybernhardt/dotfiles/blob/master/.githelpers">https://github.com/garybernhardt/dotfiles/blob/master/.githelpers</a></li></ul><div><div>now &#8217;<i style="background-color: #cccccc;">git l</i>&#8217; renders</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Rgt39G9fGfg/UJVYWh9U0lI/AAAAAAAAC6E/3nxcaZO7Keo/s1600/git-l-02.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="242" src="http://1.bp.blogspot.com/-Rgt39G9fGfg/UJVYWh9U0lI/AAAAAAAAC6E/3nxcaZO7Keo/s640/git-l-02.png" width="640" /></a></div><div><br /></div><div>&nbsp; &nbsp;</div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helper script to delete git tags locally and remote]]></title>
    <link href="http://jessehouse.com/blog/2012/10/31/helper-script-to-delete-git-tags/"/>
    <updated>2012-10-31T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/10/31/helper-script-to-delete-git-tags</id>
    <content type="html"><![CDATA[<div class='post'>
Might be useful to others, delete a bunch of git tags - remote and locally<br /><br /><br /><script src="https://gist.github.com/3989586.js?file=build-and-execute-multiple-git-commands.sh"></script><noscript>Your reader does not render gists; view code here -  <a href="https://gist.github.com/3989586.js?file=build-and-execute-multiple-git-commands.sh">https://gist.github.com/3989586.js?file=build-and-execute-multiple-git-commands.sh</a></noscript><br /><b>Resources</b><br /><br /><ul><li><a href="http://nathanhoad.net/how-to-delete-a-remote-git-tag">http://nathanhoad.net/how-to-delete-a-remote-git-tag</a>&nbsp;</li><li><a href="http://www.linuxquestions.org/questions/programming-9/bash-read-every-line-in-the-files-and-use-the-line-as-parameters-as-another-program-246291/">http://www.linuxquestions.org/questions/programming-9/bash-read-every-line-in-the-files-and-use-the-line-as-parameters-as-another-program-246291/</a></li><li><a href="http://stackoverflow.com/questions/1605232/use-bash-to-read-a-file-and-then-execute-a-command-from-the-words-extracted">http://stackoverflow.com/questions/1605232/use-bash-to-read-a-file-and-then-execute-a-command-from-the-words-extracted</a></li></ul></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Arnaud Frugier</div>
<div class='content'>
git tag -l | grep &quot;^\d&quot; | sed &#39;s/^/git push origin :/&#39; | sh<br />git tag -l | grep &quot;^\d&quot; | sed &#39;s/^/git tag -d /&#39; | sh</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[414 Request-URI Too Large]]></title>
    <link href="http://jessehouse.com/blog/2012/09/05/414-request-uri-too-large/"/>
    <updated>2012-09-05T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/09/05/414-request-uri-too-large</id>
    <content type="html"><![CDATA[<div class='post'>
<br />How to configure nginx to accept larger querystring requests<br /><br />Increase the &#8217;<i>large_client_header_buffers</i>&#8217;<br /><br />This is located in the &#8217;<i>http</i>&#8217; section of the configuration<br /><br /><b>Example:</b><br /><div><blockquote class="tr_bq">&nbsp; &nbsp; http {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # override to allow long query string<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; large_client_header_buffers 8 512k;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#8230;<br />&nbsp; &nbsp; }</blockquote><br /><b>Resources</b><br /><br /><ul><li><a href="http://stackoverflow.com/questions/1067334/how-to-set-the-allowed-url-length-for-a-nginx-request-error-code-414-uri-too">http://stackoverflow.com/questions/1067334/how-to-set-the-allowed-url-length-for-a-nginx-request-error-code-414-uri-too</a>&nbsp;</li><li><a href="http://nginx.2469901.n2.nabble.com/Nginx-returning-414-even-when-large-client-header-buffers-is-set-td7451517.html">http://nginx.2469901.n2.nabble.com/Nginx-returning-414-even-when-large-client-header-buffers-is-set-td7451517.html</a></li><li><a href="http://wiki.nginx.org/NginxHttpCoreModule#large_client_header_buffers">http://wiki.nginx.org/NginxHttpCoreModule#large_client_header_buffers</a>&nbsp;</li></ul></div><div><br /></div><div><br /></div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unofficial Twitter Bootstrap Documentation]]></title>
    <link href="http://jessehouse.com/blog/2012/08/25/unofficial-twitter-bootstrap/"/>
    <updated>2012-08-25T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/08/25/unofficial-twitter-bootstrap</id>
    <content type="html"><![CDATA[<div class='post'>
Unofficial Twitter Bootstrap Documentation<br /><a href="http://unofficial-twitter-bootstrap-documentation.com/">http://unofficial-twitter-bootstrap-documentation.com/</a><br /><br />The current project I am working on is running bootstrap 2.0.2 and after the release of 2.1.0 the online documentation for 2.0.x was gone.<br /><br />I went ahead and compiled the archive docs from the bootstrap github repo into a single site - hopefully others find it useful.<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - ActiveRecord created_by and updated_by gem]]></title>
    <link href="http://jessehouse.com/blog/2012/07/01/rails-activerecord-createdby-and/"/>
    <updated>2012-07-01T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/07/01/rails-activerecord-createdby-and</id>
    <content type="html"><![CDATA[<div class='post'>
<br />Often your application will want to track who created and updated your data.<br />On a previous rails 2 project I used a plugin called <a href="https://github.com/delynn/userstamp">userstamp</a> which worked well, but until recently it did not support rails 3+<br /><br />I didn&#8217;t find any other gems out there at the time, so I put together the clerk gem,<br />you can install it as a gem in your rails 3+ applications by adding&nbsp;<i style="background-color: #eeeeee;">gem &#8216;clerk&#8217;</i> to your Gemfile, see the <a href="https://github.com/house9/clerk/blob/master/README.md">README</a> on github for details<br /><br />NOTE: the current version relies on your database tables having columns named created_by_id and updated_by_id and the gem does not support any custom configuration.<br /><br /><br /><ul><li><a href="https://github.com/house9/clerk">https://github.com/house9/clerk</a></li><li><a href="http://rubygems.org/gems/clerk">http://rubygems.org/gems/clerk</a>&nbsp;</li></ul><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postgres: terminate all database connections]]></title>
    <link href="http://jessehouse.com/blog/2012/04/29/postgres-terminate-all-database/"/>
    <updated>2012-04-29T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/04/29/postgres-terminate-all-database</id>
    <content type="html"><![CDATA[<div class='post'>
Using psql from the command line you can terminate all connections to a database<br /><div><br /></div><div><script src="https://gist.github.com/2552481.js?file=postgres_disconnect.sql.sh"></script></div>Comes in handy when you want to do things like restore your staging or development database<br /><br /><script src="https://gist.github.com/2552493.js?file=postgres_rebuild.sql.sh"></script>  <br /><div><b>Resources</b><br /><br /><ul><li><a href="http://www.postgresql.org/docs/9.1/static/reference-client.html">http://www.postgresql.org/docs/9.1/static/reference-client.html</a>&nbsp;</li><li><a href="http://blog.gahooa.com/2010/11/03/how-to-force-drop-a-postgresql-database-by-killing-off-connection-processes/">http://blog.gahooa.com/2010/11/03/how-to-force-drop-a-postgresql-database-by-killing-off-connection-processes/</a>&nbsp;</li></ul></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postgres: random useful things]]></title>
    <link href="http://jessehouse.com/blog/2012/04/29/postgres-random-useful-things/"/>
    <updated>2012-04-29T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2012/04/29/postgres-random-useful-things</id>
    <content type="html"><![CDATA[<div class='post'>
Run sql statements from the command line, use the -c flag<br /><script src="https://gist.github.com/2552568.js?file=postgres_sql_command.sql.sh"></script><br /><br />create a random value<br /><script src="https://gist.github.com/2552573.js?file=postgres.random_value.sql"></script><br /><br />crazy updates using&nbsp;regexp_matches<br /><script src="https://gist.github.com/2552587.js?file=postgres.regexp_matches.sql"></script><br /><br /></div>
]]></content>
  </entry>
  
</feed>
