<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mvc | house9]]></title>
  <link href="http://jessehouse.com/blog/categories/mvc/atom.xml" rel="self"/>
  <link href="http://jessehouse.com/"/>
  <updated>2013-10-19T11:32:02-07:00</updated>
  <id>http://jessehouse.com/</id>
  <author>
    <name><![CDATA[Jesse House]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing asp.net MVC AuthorizeAttribute]]></title>
    <link href="http://jessehouse.com/blog/2011/04/22/fixing-aspnet-mvc-authorizeattribute/"/>
    <updated>2011-04-22T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2011/04/22/fixing-aspnet-mvc-authorizeattribute</id>
    <content type="html"><![CDATA[<div class='post'>
With very little code we can fix asp.net MVC AuthorizeAttribute<br />What problems does it have? <strong>Too much redirection</strong>.<br /><br /><ul><li>When making ajax calls a HTTP 401 (Unauthorized) would be better than a redirection</li><li>If I am already logged in but access a secure resource (controller / action) redirecting to the login page is far from ideal, an access denied view makes more sense</li></ul><div>When is the built in redirection appropriate? When making standard HTTP request and the user is not authenticated.</div><div><br /></div><div>it turns out it is&nbsp;relatively&nbsp;easy to fix these issues</div><div><ul><li>inherit AuthorizeAttribute</li><li>override&nbsp;HandleUnauthorizedRequest</li></ul></div><div>#1: Ajax request should not return redirection / html response</div><div><br /></div><div>if the user cannot authorize an action and the request is made via ajax we don't want 200 or 302 response codes</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-1vMk4_AhaKg/TbGZafGuVHI/AAAAAAAAC10/IPvdbbfA-AQ/s1600/200.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-1vMk4_AhaKg/TbGZafGuVHI/AAAAAAAAC10/IPvdbbfA-AQ/s1600/200.png" /></a></div><div><br /></div><div>we do want&nbsp;401 Unauthorized, but we have to settle for a 403&nbsp;Forbidden</div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-X05Vh4FqOcA/TbGZkKkHk5I/AAAAAAAAC14/S_Efpn5ZTFU/s1600/403.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-X05Vh4FqOcA/TbGZkKkHk5I/AAAAAAAAC14/S_Efpn5ZTFU/s1600/403.png" /></a></div><div><br /></div><div>The code to fix this</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-eqaE-lHvRKo/TbGZ8ktgViI/AAAAAAAAC18/61UvrRd6iSc/s1600/cod-403.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-eqaE-lHvRKo/TbGZ8ktgViI/AAAAAAAAC18/61UvrRd6iSc/s1600/cod-403.png" /></a></div><div><br /></div><div>#2: Authenticated users should not redirect to the login page, they should get an Access Denied page</div><div>The code to fix this</div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Rw2pqIKL5_U/TbGahZTmGLI/AAAAAAAAC2A/TnRnnwCVQ_o/s1600/access-denied-redirect.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-Rw2pqIKL5_U/TbGahZTmGLI/AAAAAAAAC2A/TnRnnwCVQ_o/s1600/access-denied-redirect.png" /></a></div><div><br /></div><div>Turns out very little code is needed - but seems like some of this should just be built in? Using the 401 response won't work because the asp mvc framework must be picking that up later on and forcing the redirection to the login page, the 403 is not ideal but it is effective.</div><div><br /></div><div>The code for our class - AuthorizeFor</div><div><script src="https://gist.github.com/936865.js?file=AuthorizeForAttribute.cs"></script><br /><noscript>&amp;amp;amp;lt;br /&amp;amp;amp;gt; // view full gist at https://gist.github.com/936865.js?file=AuthorizeForAttribute.cs&amp;amp;amp;lt;br /&amp;amp;amp;gt; public class AuthorizeForAttribute : AuthorizeAttribute&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; if(filterContext.HttpContext.Request.IsAjaxRequest())&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; // filterContext.Result = new HttpStatusCodeResult(401, "Unauthorized");&amp;amp;amp;lt;br /&amp;amp;amp;gt; filterContext.Result = new HttpStatusCodeResult(403, "Forbidden");&amp;amp;amp;lt;br /&amp;amp;amp;gt; }&amp;amp;amp;lt;br /&amp;amp;amp;gt; else if(filterContext.HttpContext.User.Identity.IsAuthenticated)&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; filterContext.Result = new RedirectResult("~/Error/AccessDenied?For=" + filterContext.HttpContext.Request.Url);                    &amp;amp;amp;lt;br /&amp;amp;amp;gt; }&amp;amp;amp;lt;br /&amp;amp;amp;gt; else&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; base.HandleUnauthorizedRequest(filterContext);                &amp;amp;amp;lt;br /&amp;amp;amp;gt; }&amp;amp;amp;lt;br /&amp;amp;amp;gt; }&amp;amp;amp;lt;br /&amp;amp;amp;gt; }&amp;amp;amp;lt;br /&amp;amp;amp;gt; </noscript></div><div><br /></div><div>Usage of our AuthorizeFor attribute</div><div><script src="https://gist.github.com/936875.js?file=AuthorizeForAttribute-Usage.cs"></script><br /><noscript>&amp;amp;amp;lt;br /&amp;amp;amp;gt; // view full gist at https://gist.github.com/936875.js?file=AuthorizeForAttribute-Usage.cs&amp;amp;amp;lt;br /&amp;amp;amp;gt; [AuthorizeFor]&amp;amp;amp;lt;br /&amp;amp;amp;gt; public ActionResult Index()&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; // ....&amp;amp;amp;lt;br /&amp;amp;amp;gt; &amp;amp;amp;lt;br /&amp;amp;amp;gt; [AuthorizeFor(Roles = "Create, View")]&amp;amp;amp;lt;br /&amp;amp;amp;gt; public ActionResult Create()&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; // ....&amp;amp;amp;lt;br /&amp;amp;amp;gt; &amp;amp;amp;lt;br /&amp;amp;amp;gt; [HttpPost]&amp;amp;amp;lt;br /&amp;amp;amp;gt; [AuthorizeFor(Roles = "Create")]&amp;amp;amp;lt;br /&amp;amp;amp;gt; public ActionResult Create(ViewModel.Foo foo)&amp;amp;amp;lt;br /&amp;amp;amp;gt; {&amp;amp;amp;lt;br /&amp;amp;amp;gt; // ....&amp;amp;amp;lt;br /&amp;amp;amp;gt; </noscript></div><div><br /></div><div>Resources</div><div><ul><li><a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.authorizeattribute.aspx">MSDN AuthorizeAttribute</a></li><li><a href="http://stackoverflow.com/questions/5519393/c-mvc-how-to-override-configured-authentication-redirect">Stack Overflow</a> post about the 401 403 issue</li></ul><div><br /></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[asp mvc jquery from cdn with fallback to localhost]]></title>
    <link href="http://jessehouse.com/blog/2011/03/15/asp-mvc-jquery-from-cdn-with-fallback/"/>
    <updated>2011-03-15T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2011/03/15/asp-mvc-jquery-from-cdn-with-fallback</id>
    <content type="html"><![CDATA[<div class='post'>
Paul Irish has some nice code for loading jquery from cdn but then falling back to localhost if it cannot be loaded from cdn. Check it out <a href="http://paulirish.com/2010/the-protocol-relative-url/">here</a>.<br /><br />For asp mvc you usually also want jquery.valdiater and possibly unobtrusive validation as well. Here is an html helper to generate html mark up that handles loading these via cdn with fallback<br /><br />The helper<br /><script src="https://gist.github.com/871851.js?file=cdn-with-fallback.cs"></script><br /><noscript><br />using System;<br />using System.Web.Mvc;<br />using System.Web.Mvc.Html;<br />using System.Web.Routing;<br /><br />public static class HtmlHelperExtensions<br />{<br />    /// <summary><br />    /// render script tag to include javascript file from cdn, but fallback to local if cannot be loaded<br />    /// </summary><br />    /// <param name="helper"></param>    /// <param name="cdnPath">start with // to handle either http or https</param>    /// <param name="localPath">start with ~/</param>    /// <param name="javascriptCondition">javascript condition, if true then your browser will load the local file</param>    /// <returns><br />    ///    <script src="http://jessehouse.com//ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script><br />    ///    <script>!window.jQuery && document.write(unescape('%3Cscript src="http://jessehouse.com/Scripts/jquery-1.4.4.min.js"%3E%3C/script%3E'))</script><br />    /// </returns><br />    /// <seealso cref="http://paulirish.com/2010/the-protocol-relative-url/"/><br />    public static MvcHtmlString JavascriptIncludeFromCdnWithFallback(this HtmlHelper helper, string cdnPath, string localPath, string javascriptCondition)<br />    {<br />        var urlHelper = new UrlHelper(helper.ViewContext.RequestContext);<br />        var cdnBuilder = new TagBuilder("script");<br />        var localBuilder = new TagBuilder("script");<br /><br />        // src for cdn resource<br />        cdnBuilder.Attributes.Add("src", cdnPath);<br />        // js to build a local script tag if needed<br />        localBuilder.InnerHtml = String.Format<br />        (<br />            "{0} && document.write(unescape('%3Cscript src=\"{1}\"%3E%3C/script%3E'))",<br />            javascriptCondition,<br />            urlHelper.Content(localPath)<br />        );<br />        // return markup<br />        var built = String.Format("{0}\n\t{1}", cdnBuilder.ToString(TagRenderMode.Normal), localBuilder.ToString(TagRenderMode.Normal));<br />        return MvcHtmlString.Create(built);<br />    }<br />}<br /></noscript><br /><br />Usage, most likely from your layout file<br /><script src="https://gist.github.com/871856.js?file=cdn-with-fallback.cshtml"></script><br /><noscript><br />@Html.JavascriptIncludeFromCdnWithFallback(<br />    "//ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js",<br />    "~/Scripts/lib/jquery/jquery-1.4.4.min.js", <br />    "!window.jQuery"<br />)<br /><br />@Html.JavascriptIncludeFromCdnWithFallback(<br />    "//ajax.aspnetcdn.com/ajax/jquery.validate/1.7/jquery.validate.min.js",<br />    "~/Scripts/lib/jquery/jquery.validate.min.js", <br />    "!window.jQuery.validator"<br />)<br /><br />@Html.JavascriptIncludeFromCdnWithFallback(<br />    "//ajax.aspnetcdn.com/ajax/mvc/3.0/jquery.validate.unobtrusive.min.js",<br />    "~/Scripts/lib/jquery/jquery.validate.unobtrusive.min.js", <br />    "!window.jQuery.validator.unobtrusive"<br />)<br /></noscript><br /><br />And the rendered html<br /><script src="https://gist.github.com/871857.js?file=cdn-with-fallback-rendered.html"></script><br /><noscript><br /><script src="http://jessehouse.com//ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script><br /><script>!window.jQuery && document.write(unescape('%3Cscript src="http://jessehouse.com/Scripts/lib/jquery/jquery-1.4.4.min.js"%3E%3C/script%3E'))</script><br /><br /><script src="http://jessehouse.com//ajax.aspnetcdn.com/ajax/jquery.validate/1.7/jquery.validate.min.js"></script><br /><script>!window.jQuery.validator && document.write(unescape('%3Cscript src="http://jessehouse.com/Scripts/lib/jquery/jquery.validate.min.js"%3E%3C/script%3E'))</script><br /><br /><script src="http://jessehouse.com//ajax.aspnetcdn.com/ajax/mvc/3.0/jquery.validate.unobtrusive.min.js"></script><br /><script>!window.jQuery.validator.unobtrusive && document.write(unescape('%3Cscript src="http://jessehouse.com/Scripts/lib/jquery/jquery.validate.unobtrusive.min.js"%3E%3C/script%3E'))</script><br /></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP MVC Razor templates with nested layout and sections]]></title>
    <link href="http://jessehouse.com/blog/2010/11/17/asp-mvc-razor-templates-with-nested/"/>
    <updated>2010-11-17T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2010/11/17/asp-mvc-razor-templates-with-nested</id>
    <content type="html"><![CDATA[<div class='post'>
Using ASP MVC 3 with Razor views.<br /><br />Ran into an issue with nested layouts and wanting to render a section in a top level layout, but define it in the view which uses a 'child' layout (master) page. This was generating a runtime error of:<br /><br /><blockquote><span class="Apple-style-span" style="background-color: yellow;">The following sections have been defined but have not been rendered for the layout page...</span>&nbsp;</blockquote><br />I posted some code to the asp.net forum and github. A nice workaround was supplied by 'Imran Baloch'<br /><br /><br /><ul><li><a href="https://github.com/house9/SampleAspMvc3NestedLayoutSectionIssue">Sample code at github</a></li><li><a href="http://forums.asp.net/p/1623650/4170485.aspx">Forum Post over at asp.net forums</a></li></ul></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>billy.braga</div>
<div class='content'>
I had the same problem. Seems when you have three levels of layouts, the intermediate one must render all sections of the child, even if the top most parent will do so.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The best overload for 'RenderSection' does not have a parameter named 'optional']]></title>
    <link href="http://jessehouse.com/blog/2010/10/29/best-overload-for-rendersection-does/"/>
    <updated>2010-10-29T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2010/10/29/best-overload-for-rendersection-does</id>
    <content type="html"><![CDATA[<div class='post'>
I've been taking a look at <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=0abac7a3-b302-4644-bd43-febf300b2c51&amp;displaylang=en">asp.net mvc 3 beta</a> with razor view templates.<br /><div><br /></div><div>some of the examples on the net are from previous releases and things have changed; one that I came across was the RenderSection method which can be used in layout (master) files</div><div><br /></div><blockquote><span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;">@RenderSection("Header", optional:true)</span></blockquote>will throw an exception<br /><br /><blockquote><span class="Apple-style-span" style="background-color: yellow;"><i>The best overload for 'RenderSection' does not have a parameter named 'optional'</i></span></blockquote>the newer syntax for rendering an optional section appears to be<br /><br /><blockquote><span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;">@RenderSection("Header", false)&nbsp;</span></blockquote></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>giddy</div>
<div class='content'>
The parameter name has been renamed to required actually =P</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python MVC web framework - web2py]]></title>
    <link href="http://jessehouse.com/blog/2008/05/10/python-mvc-web-framework-web2py/"/>
    <updated>2008-05-10T00:00:00-07:00</updated>
    <id>http://jessehouse.com/blog/2008/05/10/python-mvc-web-framework-web2py</id>
    <content type="html"><![CDATA[<div class='post'>
Recently I did a google search for a <a href="http://www.google.com/search?q=Python+MVC+web+framework">Python MVC web framework</a>. I have never done any coding in <a href="http://www.python.org/">Python</a> but it seems to be one of the primary languages used at Google and currently the only language supported on the <a href="http://code.google.com/appengine/kb/general.html#language">Google App Engine</a> so it seemed worth getting familiar with.<br /><br /><a href="http://www.djangoproject.com/">Django</a> seems to be one of the most robust python mvc frameworks around at this time and I was going to dive in and create a small toy application with it, but then I stumbled across a comment on some blog that talked about the <a href="http://www.web2py.com/">web2py</a> MVC framework, still in it's infancy, development is very active on the project. It seems very easy to get up to speed with the framework and even someone who does not know Python can get a simple site up and running.<br /><br />I love this graphic from one of the pdfs on the site<br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_vmq8pP42BnQ/SCXEI9-YY2I/AAAAAAAAAD0/XJEy7-CaHGg/s1600-h/web2py.PNG"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://3.bp.blogspot.com/_vmq8pP42BnQ/SCXEI9-YY2I/AAAAAAAAAD0/XJEy7-CaHGg/s400/web2py.PNG" alt="" id="BLOGGER_PHOTO_ID_5198777003223311202" border="0" /></a><br />The feature list taken directly from the site<br /><div style="font-style: italic;" class="post"> <ul><li><span style="font-size:85%;">No installation, no configuration, no dependencies. All in one package. You can run it off a USB drive</span></li><li><span style="font-size:85%;">Runs on Windows, OSX, Unix/Linux, and Windows CE phones.</span></li><li><span style="font-size:85%;">Allows development, debugging, testing, deployment, maintenance and administration, including database administration, via the provided web interface.</span></li><li><span style="font-size:85%;">Enforces good Software Engineer practices, like the Model-View-Controller design, validation and self-submission of forms.</span></li><li><span style="font-size:85%;">Strong on security. Prevents the most common types of vulnerabilities: Cross Site Scripting, Injection Flaws, and Malicious File Execution.</span></li><li><span style="font-size:85%;">Talks HTML, XML, RSS, ATOM, AJAX, JSON, RTF, CSV, WIKI, XML-RPC, REST, Flash, etc.</span></li><li><span style="font-size:85%;">Dynamically and transparently generates SQL queries for you for SQLite, MySQL, PostgreSQL and Oracle. Even creates and alters tables for you when required. Performs automatic transactions.</span></li><li><span style="font-size:85%;">Allows you to create apps easily, byte-code compile them, and distribute them in open or closed source under any license you like.</span></li><li><span style="font-size:85%;">Faster then the competition, designed for small as well as large projects, includes the ability to upload/download/stream large files, internationalization support, distributed transactions, ...</span></li></ul> </div><span style="font-size:100%;"><a href="http://www.web2py.com/">Web2py</a><span> is worth checking out!</span></span><br /><br />.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
He's found the right balance!<BR/><BR/>No, I am not affiliated with him, nor the university.  I am just a user who is glad that I didn't go down the "everybody is using __framework already so let me use that too" path.</div>
</div>
<div class='comment'>
<div class='author'>kindablue2</div>
<div class='content'>
I'm going to take a look. And btw - I like the credentials as well.  A framework written by a CS Prof is more likely to embody the abstract qualities cherished in acadamia - this in my mind is a good thing. The problems start when the abstract conflicts with the practical - *good* frameworks find the right balance.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
"Because the creator is a professor of Computer Science ..."<BR/><BR/>Oh dear god.  Being a computer science professor says nothing about your ability to design or implement a framework.  Some of the worst programmers I've ever met have been computer science professors.<BR/><BR/>This might be an awesome framework (I'm skeptical, but I've not tried it), but if so it's not because he's a professor.</div>
</div>
<div class='comment'>
<div class='author'>Gregor</div>
<div class='content'>
It's more than that ... this is a step into a whole new world!<BR/><BR/>You may recall the recent release of the Google appengine, but what you may not know is: that platform will fundamentally change the way webapps are done, largely due to the Bigtable datastore and the banishment of the SQL-based relational database model to the realm of localhost, and eventually to the status of a horse-and-buggy.<BR/><BR/>What's exciting about web2py is that you live in the browser all the time, and, because it's written in python, it will integrate that much more quickly into the appengine domain.<BR/><BR/>Because the creator is a professor of Computer Science, you get all the good stuff boiled down to   the essence of just what you need for webapp development.<BR/><BR/>Download it, run the tutorial, and you too will be hooked.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
