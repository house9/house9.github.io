<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unit test | house9]]></title>
  <link href="http://jessehouse.com/blog/categories/unit-test/atom.xml" rel="self"/>
  <link href="http://jessehouse.com/"/>
  <updated>2014-02-13T14:34:46-08:00</updated>
  <id>http://jessehouse.com/</id>
  <author>
    <name><![CDATA[Jesse House]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MSTest output result to HTML]]></title>
    <link href="http://jessehouse.com/blog/2011/03/11/mstest-output-result-to-html/"/>
    <updated>2011-03-11T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2011/03/11/mstest-output-result-to-html</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://msdn.microsoft.com/en-us/library/ms182489(v=vs.80).aspx">MSTest</a> generates trx (xml) files which can be viewed in Visual Studio. But often you will be executing MSTest from the command line via your Continuous Integration (CI) server and you will want to view them in an html format outside Visual Studio.<br /><br /><a href="http://trx2html.codeplex.com/">trx2html</a> to the rescue!<br /><br /><ul><li>download the zip file here -&nbsp;<a href="http://trx2html.codeplex.com/">http://trx2html.codeplex.com/</a></li><li>unzip and put the files somewhere</li><ul><li>I choose C:\Program Files (x86)\trx2html</li></ul><li>execute it from the command line&nbsp;</li></ul><div><br /></div><div><pre><span class="Apple-style-span" style="color: #38761d;"># in YourTestProject\bin\Release</span><br /><span class="Apple-style-span" style="color: #444444;">"C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\mstest.exe"</span> <span class="Apple-style-span" style="color: #0b5394;">/testcontainer:</span>YourTestProject.dll <span class="Apple-style-span" style="color: #0b5394;">/resultsfile:</span>TestResult.trx<br /><br /><span class="Apple-style-span" style="color: #444444;">"C:\Program Files (x86)\trx2html\0.6\trx2html.exe"</span> TestResult.trx<br /><span class="Apple-style-span" style="color: #38761d;"># outputs TestResult.trx.htm</span><br /></pre></div><div><br /></div><div><br /></div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>House 9</div>
<div class='content'>
Try running it from the directory that your trx file is in<br /><br />&gt; cd DIRECTORY_WIHT_TRX_FILE<br /><br />&gt; &quot;D:\share\TRX2HTML_A\0.6\trx2html.exe&quot; TRX_FILE_NAME</div>
</div>
<div class='comment'>
<div class='author'>Atul Mhetre</div>
<div class='content'>
Hi,<br /><br />I am having problem in converting trx file into HTML file.<br /><br />I navigate to trx2htm.exe in command prompt and used command as - D:\share\TRX2HTML_A\0.6&gt;cd D:\share\TRX2HTML_A\0.6<br /><br />D:\share\TRX2HTML_A\0.6&gt;trx2html atul.mhetre_NTPC01395 2013-01-22 15_05_51.trx<br />trx2html.exe<br />  Create HTML reports of VSTS TestRuns. (c)rido&#39;08<br />version:0.6.0.2798<br /><br />Usage: trx2html .trx<br /><br />D:\share\TRX2HTML_A\0.6&gt;<br /><br />So I am getting output as -<br /><br />trx2html.exe<br />  Create HTML reports of VSTS TestRuns. (c)rido&#39;08<br />version:0.6.0.2798<br /><br />Usage: trx2html .trx<br /><br />And no html file is generating. Please help.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rhino.Mocks - the basics]]></title>
    <link href="http://jessehouse.com/blog/2008/02/16/rhinomocks-basics_16/"/>
    <updated>2008-02-16T00:00:00-08:00</updated>
    <id>http://jessehouse.com/blog/2008/02/16/rhinomocks-basics_16</id>
    <content type="html"><![CDATA[<div class='post'>
Started using Rhino.Mocks recently (Awesome!!!) - just wanted to list a few of the basics; the official Rhino Mocks Documentation is very good and available <a href="http://www.ayende.com/Wiki/(S(0asrslmlg1jh5355jtljowre))/Rhino+Mocks+Documentation.ashx">here</a>. These examples are a bit rough, they have not been compiled; there may be typos.<br /><br /><b>using</b><br /><pre>using Rhino.Mocks;</pre><br /><b>The mock repository</b><br /><pre>// use the mock repository to create the mocked objects<br />MockRepository mocks = new Rhino.Mocks.MockRepository();<br />// example<br />System.Object someObject = mocks.CreateMock<System.Object>();<br />// set up the behaviour you want from calls to your mocked object <br />Rhino.Mocks.Expect.Call(someObject.Equals(someParameter)).Return(false);<br />// then don't forget<br />mocks.ReplayAll();<br />// now do stuff that calls your mocked object Equals method<br />...<br /></pre><br /><b>Mock a call to the db</b><br /><pre>// create our mocked repository object - IProductRepository, the real one calls the db<br />IProductRepository repository = mocks.CreateMock<iproductrepository>();<br />// tell rhino.mocks when we call the method GetProduct with the argument 33 to return null<br />Rhino.Mocks.Expect.Call(repository.GetProduct(33)).Return(null);<br />// get the mocking ready<br />mocks.ReplayAll();<br />// pass our mock to our product service layer<br />ProductService service = new ProductService(repository);<br />// service.GetProduct makes a call to the mocked repository.GetProduct which will return null<br />IProduct product = service.GetProduct(33);<br />// should be null<br />Assert.IsNull(product);<br /></pre><br /><b>Ignore any arguments</b><br /><pre>// any call to GetProduct will return null no matter the value of the arg<br />Rhino.Mocks.Expect.Call(repository.GetProduct(null)).Return(null).IgnoreArguments();<br /></pre><br /><b>mock a method that returns void</b><br /><pre>IProduct product = new Product("003092", "Sierra Nevada", 6.49);<br />// this void call will handle our product 003092<br />Rhino.Mocks.Expect.Call(delegate { repository.Save(product); });<br />// this void call will handle any argument<br />Rhino.Mocks.Expect.Call(delegate { repository.Save(null); }).IgnoreArguments();<br /></pre><br /><b>Handle multiple calls to the same method</b><br /><pre>IProduct product = new Product("003092", "Sierra Nevada", 6.49);<br />// note the .Repeat.Any()<br />Rhino.Mocks.Expect.Call(repository.GetProduct("003092")).Return(product).Repeat.Any();<br />// send the mock to our product service object<br />ProductService service = new ProductService(repository);<br />// find by sku calls GetProduct on the mocked Product repository<br />IProduct beer = service.FindBySku("003092");<br />// find decent beer calls GetProduct on the mocked Product repository also<br />IProduct decentBeer = service.FindDecentBeer();<br /></pre><br /><b>Partial Mock</b><br /><pre>// create a partial mock with constructor args (our product repository again)<br />IProductService service = mocks.PartialMock<iproductservice>(repository);<br />// our test case data<br />IUser loggedOnUser = new User("John", "Doe", CustomerType.Gold);<br />// mock product service calls to GetLoggedOnUser<br />Rhino.Mocks.Expect.Call(service.GetLoggedOnUser()).Return(loggedOnUser);<br />// get the mocking ready<br />mocks.ReplayAll();<br />// now GetDiscount is not a mocked method but it does call the mocked GetLoggedOnUser method<br />decimal discount = service.GetDiscount();<br />// assert the result<br />Assert.AreSame(44.4M, discount, "Gold customer discount not correct?");<br />// NOTE: this will not work (compile) unless the mocked method GetLoggedOnUser is public<br /></pre></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>House 9</div>
<div class='content'>
Had an issue with comment moderation<br>-------------------------------------<br><br>New Day posted this about a month ago<br><br>For the Equals method I get the same error as ben.biddington. I am using .NET 2.0<br>The error occurs on the line with Expect.Call so it does not proceed any further down the test.<br><br>Error <br>&quot;Invalid call, the last call has been used or no call has been made (make sure that you are calling a virtual (C#) / Overridable (VB) method).&quot;</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
IProduct product = new Product(&quot;003092&quot;, &quot;Sierra Nevada&quot;, 6.49);<br>  <br>Lär ju gå bra att instansiera ett interface, nötter...</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
In 3.5 CreateMock is deprecated and should be changed to StrictMock.  Might want to try that,</div>
</div>
<div class='comment'>
<div class='author'>House 9</div>
<div class='content'>
I have not tried it on 3.5 of .net but I believe it should work. Is it possible you are making multiple calls to the same mocked method? you might need a .Repeat.Any();</div>
</div>
<div class='comment'>
<div class='author'>ben.biddington</div>
<div class='content'>
Hi, <br><br>Does you first example (The mock repository) work with v.3.5?<br><br>I get the error:<br><br>Invalid call, the last call has been used or no call has been made (make sure that you are calling a virtual (C#) / Overridable (VB) method).</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
