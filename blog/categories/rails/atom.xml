<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | house9]]></title>
  <link href="http://jessehouse.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jessehouse.com/"/>
  <updated>2015-04-07T08:34:04-07:00</updated>
  <id>http://jessehouse.com/</id>
  <author>
    <name><![CDATA[Jesse House]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[upgrading from rspec 2 to rspec 3]]></title>
    <link href="http://jessehouse.com/blog/2015/03/19/upgrading-from-rspec-2-to-rspec-3/"/>
    <updated>2015-03-19T16:42:00-07:00</updated>
    <id>http://jessehouse.com/blog/2015/03/19/upgrading-from-rspec-2-to-rspec-3</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the last few days upgrading a rails application from 4.1 to 4.2 and as part of the upgrade going from rspec 2.99 to 3.2.</p>

<p>The rspec upgrade was much easier than I had anticipated thanks to the <a href="https://github.com/yujinakayama/transpec">transpec</a> <a href="https://rubygems.org/gems/transpec">gem</a>.</p>

<ul>
<li>added the <a href="https://github.com/rspec/rspec-its">rspec-its</a> <a href="https://rubygems.org/gems/rspec-its">gem</a> to my Gemfile</li>
<li>then ran the transpec migration</li>
</ul>


<p><code>
gem install transpec
transpec --keep its --negative-form to_not
rspec spec
git commit -aeF .git/COMMIT_EDITMSG
</code></p>

<p>Only a few minor tweaks were needed to my specs after the migration &ndash; the transpec is brilliant!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Mac OS X for rails development]]></title>
    <link href="http://jessehouse.com/blog/2015/02/02/setup-mac-os-x-for-rails-development/"/>
    <updated>2015-02-02T09:33:00-08:00</updated>
    <id>http://jessehouse.com/blog/2015/02/02/setup-mac-os-x-for-rails-development</id>
    <content type="html"><![CDATA[<p>Whenever I get new machine or re-install my OS I like to use pivotals <a href="https://github.com/pivotal-sprout/sprout-wrap">sprout-wrap</a> for the setup. I have been through the process many times and finally documented it back in October.</p>

<p>From the app store install XCode</p>

<ul>
<li>open XCode and accept the terms, then close app</li>
<li>from the terminal run: <code>xcode-select --install</code></li>
<li>copy ssh keys from old machine via airdrop</li>
<li>then install sprout-wrap dependencies using the built in version of Ruby that ships with Mac OS X:</li>
</ul>


<p><code>
sudo gem install soloist
sudo gem install bundler
mkdir installs
cd installs
git clone https://github.com/pivotal-sprout/sprout-wrap.git
cd sprout-wrap
sudo bundle
</code></p>

<p>Modify the <code>soloistrc</code> file if desired; for me that means adding &lsquo;sourcetree&rsquo;, &lsquo;hipchat&rsquo; and a few others to the casks section.</p>

<p>The full list of available casks are here: <a href="https://github.com/pivotal-sprout/sprout-osx-apps/tree/master/recipes">https://github.com/pivotal-sprout/sprout-osx-apps/tree/master/recipes</a></p>

<p>You probably want to change the &lsquo;Energy Saver&rsquo; settings to never while the installs are running.</p>

<p><code>bundle exec soloist</code></p>

<p>Enter your password after prompted and then watch the magic happen&hellip;</p>

<p>A few hours later, after sprout-wrap is done; time for a few more &lsquo;manual&rsquo; installs</p>

<ul>
<li><a href="https://github.com/carlhuda/janus">janus</a> for vim configuration (i dont' use vim much but occasionally pair with people who do)</li>
<li>Clone personal dotfiles</li>
<li>install some firefox add ons</li>
<li>For chrome once I login to Google all of my add ons will auto install</li>
<li>Install <a href="http://www.sublimetext.com/3">SublimeText3</a> and <a href="https://packagecontrol.io/installation">Package Control</a>

<ul>
<li>If you prefer SublimeText2 it is available as a cask and can be installed via soloist</li>
</ul>
</li>
</ul>


<blockquote><p>then Encrypt your hard drive using FileVault2</p></blockquote>

<p>Done! :)</p>

<hr />

<p><em>NOTE: if you install sprout-wrap with defaults it will configure many os-x settings which you may or may not like; I personally do like them, especially the &lsquo;Fast Key Repeat Rate&rsquo;.</em></p>

<p>This post originally appeared on the private discussion board <a href="http://parley.rubyrogues.com/">Ruby Rogues Parley</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, timezones, javascript and moment.js]]></title>
    <link href="http://jessehouse.com/blog/2014/12/13/rails-timezones-javascript-and-moment-js/"/>
    <updated>2014-12-13T10:33:00-08:00</updated>
    <id>http://jessehouse.com/blog/2014/12/13/rails-timezones-javascript-and-moment-js</id>
    <content type="html"><![CDATA[<p>So you need to display some datetimes in your new ember.js/angular/backbone UI and the times must be displayed for a timezone which is different from the logged on user.</p>

<p>Let us say we have an <code>Event</code> class in our rails application with the following attributes:</p>

<p><code>ruby
create_table :events do |t|
  t.string :event_name, null: false
  t.text :description
  t.datetime :start_at, null: false
  t.string :time_zone, null: false, default: 'UTC'
end
</code></p>

<p>Rails uses the timezone format: <code>Eastern Time (US &amp; Canada)</code></p>

<p>Javascript (and therefore the <a href="http://momentjs.com/timezone/">moment-timezone</a> library) use <a href="http://en.wikipedia.org/wiki/Tz_database">the format</a>: <code>America/New_York</code></p>

<p>Rails can easily convert this for you and return the proper js format in your json:</p>

<p>```ruby
class Event &lt; ActiveRecord::Base
  # &hellip;</p>

<p>  def time_zone_mapping</p>

<pre><code># time_zone =&gt; Eastern Time (US &amp; Canada)
ActiveSupport::TimeZone::MAPPING[self.time_zone] # =&gt; America/New_York
</code></pre>

<p>  end
end
```</p>

<p>and with <a href="http://momentjs.com/">moment.js</a> and <a href="http://momentjs.com/timezone/">moment-timezone</a></p>

<p><code>javascript
// where 'event' is the js representation of your rails model
moment(event.startAt).tz(event.timeZoneMapping).format('dddd, MMMM Do YYYY h:mm a z');
</code></p>

<p>You will want to ensure that all json is being rendered with <code>UTC</code> as the configured timezone in rails,
i.e. <code>config.time_zone = 'UTC'</code> in your application config and/or <code>Time.zone = 'UTC'</code> in your api controller.</p>

<p>See also</p>

<ul>
<li><a href="/blog/2013/11/15/working-with-timezones-and-ruby-on-rails/">Ruby on Rails: Timezones</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html">ActiveSupport::TimeZone</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stub paperclip s3 uploads in rspec]]></title>
    <link href="http://jessehouse.com/blog/2014/02/13/stub-paperclip-s3-uploads-in-rspec/"/>
    <updated>2014-02-13T14:22:00-08:00</updated>
    <id>http://jessehouse.com/blog/2014/02/13/stub-paperclip-s3-uploads-in-rspec</id>
    <content type="html"><![CDATA[<p>I was searching around stackoverflow trying to figure how to stub out s3 uploads with paperclip when running unit tests; came across a few that looked promising, along the lines of:</p>

<p><code>ruby
Model.any_instance.stubs(:save_attached_files).returns(true)
</code></p>

<p>But that was not working with <a href="https://github.com/thoughtbot/paperclip">paperclip</a> version 4, a quick look at the stacktrace reveled the method I wanted to mock.</p>

<pre>
Failure/Error: report.save
AWS::S3::Errors::InvalidAccessKeyId:
  The AWS Access Key Id you provided does not exist in our records.
/Users/me/.rvm/gems/ruby-2.1.0/gems/aws-sdk-1.33.0/lib/aws/core/client.rb:374:in `return_or_raise'
/Users/me/.rvm/gems/ruby-2.1.0/gems/aws-sdk-1.33.0/lib/aws/core/client.rb:475:in `client_request'
(eval):3:in `put_object'
/Users/me/.rvm/gems/ruby-2.1.0/gems/aws-sdk-1.33.0/lib/aws/s3/s3_object.rb:1751:in `write_with_put_object'
/Users/me/.rvm/gems/ruby-2.1.0/gems/aws-sdk-1.33.0/lib/aws/s3/s3_object.rb:607:in `write'
/Users/me/.rvm/gems/ruby-2.1.0/gems/paperclip-4.0.0/lib/paperclip/storage/s3.rb:337:in `block in flush_writes'
/Users/me/.rvm/gems/ruby-2.1.0/gems/paperclip-4.0.0/lib/paperclip/storage/s3.rb:314:in `each'
/Users/me/.rvm/gems/ruby-2.1.0/gems/paperclip-4.0.0/lib/paperclip/storage/s3.rb:314:in `flush_writes'
/Users/me/.rvm/gems/ruby-2.1.0/gems/paperclip-4.0.0/lib/paperclip/attachment.rb:239:in `save'
/Users/me/.rvm/gems/ruby-2.1.0/gems/paperclip-4.0.0/lib/paperclip/has_attached_file.rb:87:in `block in add_active_record_callbacks'
/Users/me/.rvm/gems/ruby-2.1.0/gems/activesupport-3.2.16/lib/active_support/callbacks.rb:460:in `_run__2863894366922569793__save__4567171711544756900__callbacks'
/Users/me/.rvm/gems/ruby-2.1.0/gems/activesupport-3.2.16/lib/active_support/callbacks.rb:405:in `__run_callback'
/Users/me/.rvm/gems/ruby-2.1.0/gems/activesupport-3.2.16/lib/active_support/callbacks.rb:385:in `_run_save_callbacks'
# ...
</pre>


<p>after double checking the code on github, a working stub:</p>

<p><code>ruby
Paperclip::Attachment.any_instance.stub(:save).and_return(true)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails: Timezones]]></title>
    <link href="http://jessehouse.com/blog/2013/11/15/working-with-timezones-and-ruby-on-rails/"/>
    <updated>2013-11-15T10:03:00-08:00</updated>
    <id>http://jessehouse.com/blog/2013/11/15/working-with-timezones-and-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>This article outlines some basic guidelines to follow when working with timezones in Ruby on Rails applications. Ruby on Rails has great support for timezones, but getting it working correctly can be tricky. Following the techniques below should save you some headache.</p>

<ul>
<li>Application Settings &ndash; use the default UTC settings</li>
<li>Set each request to the logged on users timezone</li>
<li>Display times and dates using the I18n view helpers</li>
<li>Override user timezone when displaying time aware entity</li>
<li>Override user timezone when saving time aware entity</li>
<li>Filter data based on the users timezone</li>
</ul>


<blockquote><p>Is it &lsquo;time zone&rsquo;, &lsquo;timezone&rsquo; or &lsquo;time-zone&rsquo;? Both styles end up being used in rails code base <code>config.time_zone</code> and <code>config.active_record.default_timezone</code>. I use timezone in this article and time_zone in the sample code base. Read more on <a href="http://english.stackexchange.com/questions/3934/time-zone-vs-timezone">stackexchange</a>.</p></blockquote>

<p>Sample code can be found at: <a href="https://github.com/house9/sample_timez">https://github.com/house9/sample_timez</a></p>

<p>The sample includes user profiles with timezone settings, an event model, and a work schedule model. It comes with a small set of sample data as well. To set it up locally, follow the <a href="https://github.com/house9/sample_timez/blob/master/README.md">README</a> instructions.</p>

<h2>Application Settings</h2>

<p>Rails uses the following defaults for a new application</p>

<ul>
<li>Application assumes it is running in UTC</li>
<li>Database assumes it is storing data in UTC</li>
</ul>


<blockquote><p>I recommend you keep these defaults!</p></blockquote>

<h4>in rails console (default settings)</h4>

<p>```ruby
Time.zone.name</p>

<h1>=> &ldquo;UTC&rdquo;</h1>

<p>ActiveRecord::Base.default_timezone</p>

<h1>=> :utc</h1>

<p>```</p>

<p>Both <em>can be</em> overriden in your application configuration file (config/application.rb) &ndash; <em>don&rsquo;t do it!</em></p>

<p>```ruby</p>

<h1>Do NOT do this!!!</h1>

<p>config.time_zone = &lsquo;Central Time (US &amp; Canada)&rsquo;
config.active_record.default_timezone = :local
```</p>

<h2>Set the timezone for each request</h2>

<p>How you determine the &lsquo;current users&rsquo; timezone will differ from application to application. In the sample code we are storing the value on the user model in a time_zone field. The sample application uses the techniques from this <a href="http://railscasts.com/episodes/106-time-zones-revised">RailsCast</a> episode. Alternatively you may  want to set it based on the client&rsquo;s browser setting.</p>

<p>Use an <code>around_filter</code> or combo of <code>before_filter</code> and <code>after_filter</code> to set each request&rsquo;s timezone in the <code>ApplicationController</code>. If we don&rsquo;t have a current user it will default to UTC.</p>

<p>```ruby
class ApplicationController &lt; ActionController::Base
  # &hellip;
  around_filter :user_time_zone, if: :current_user</p>

<p>  private</p>

<p>  def user_time_zone(&amp;block)</p>

<pre><code>Time.use_zone(current_user.time_zone, &amp;block)
</code></pre>

<p>  end
end
```</p>

<h2>Display times and dates using the I18n view helpers</h2>

<p>The <code>I18n</code> helpers are timezone aware. Aside from rendering the datetimes in the logged on users locale format, they will convert the stored UTC times to the current threads timezone.</p>

<ul>
<li><a href="http://guides.rubyonrails.org/i18n.html#adding-date-time-formats">http://guides.rubyonrails.org/i18n.html#adding-date-time-formats</a></li>
<li><a href="https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale">https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale</a></li>
</ul>


<p>On the homepage of the sample application there are numerous examples, also check out the <code>config/locales/en.yml</code> file.</p>

<p>Basic example:</p>

<p><code>ruby
I18n.localize(current_user.created_at)
</code></p>

<blockquote><p>Beware: I18n.localize does not handle nil values. You will need to guard against nils for nullable columns.</p></blockquote>

<h2>Override the display of dates</h2>

<p>In the sample application we have an Event model and a WorkSchedule model. Each model has its own timezone. Events are based on where the event will actually occur. In this case displaying the dates in the users timezone makes no sense at all, so we must override the display. There are a few techniques that can be employed:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/DateTime.html#method-i-in_time_zone">in_time_zone</a> method (see work schedule in the sample application)</li>
<li><a href="http://api.rubyonrails.org/classes/Time.html#method-c-use_zone">Time.use_zone</a> blocks (see events in the sample application)</li>
</ul>


<p><code>in_time_zone</code> example: WorkSchedule overrides the start_at and end_at model attributes, therefore no special handling is needed in the views (of course you still need to use I18n.localize).</p>

<p>```ruby
class WorkSchedule &lt; ActiveRecord::Base
  def start_at</p>

<pre><code>super.in_time_zone(time_zone) if super &amp;&amp; time_zone
</code></pre>

<p>  end</p>

<p>  def end_at</p>

<pre><code>super.in_time_zone(time_zone) if super &amp;&amp; time_zone
</code></pre>

<p>  end
end
```</p>

<p><code>Time.use_zone</code> example: The Event model does <em>not</em> override start_at or end_at attributes, but uses Time.use_zone blocks in the views.</p>

<pre><code>&lt;!-- displayed times in the events timezone --&gt;
&lt;% Time.use_zone(@event.time_zone) do %&gt;
  &lt;%= l(@event.start_at) %&gt;
  &lt;%= l(@event.end_at) %&gt;
&lt;% end %&gt;
&lt;!-- now back to the logged on users timezone --&gt;
&lt;p&gt;
  Created at &lt;%= l(@event.created_at) %&gt;
  Updated at &lt;%= l(@event.updated_at) %&gt;
&lt;/p&gt;
</code></pre>

<p>There is odd behavior with Time.use_zone when doing in-memory sorting in ruby (<code>sort_by</code>). See the <code>HomeController</code> in the sample application. Ordered attributes do not convert in the use_zone block. I am not sure if this a bug or by design.</p>

<h2>Override timezone when saving data</h2>

<p>Sometimes you want to override saving data. Let&rsquo;s say my profile is set up with &lsquo;Pacific&rsquo; timezone, but I am creating an event that will occur in New York (&lsquo;Eastern&rsquo; timezone). I do <em>not</em> want rails to convert the times to &lsquo;Pacific&rsquo;. We can reset the current threads timezone to the events timezone before the create and update actions execute.</p>

<p>```ruby
class EventsController &lt; ApplicationController
  before_action :set_event_time_zone, only: [:create, :update]</p>

<p>  # &hellip; all action code (unchanged)</p>

<p>  private</p>

<p>  def set_event_time_zone</p>

<pre><code>if params[:event]
  Time.zone = params[:event][:time_zone]
end
</code></pre>

<p>  end
end
```</p>

<p>Alternatively this could be done using <code>Time.use_zone</code> blocks in the create and update actions.</p>

<h2>Filter data based on the users timezone</h2>

<p>Rails will handle most of this automatically if you don&rsquo;t use raw sql. For example:</p>

<p><code>ruby
articles = Article.where("published_at &gt; ?", Time.zone.now)
</code></p>

<p>If you are filtering datetime data by the day be careful, the below queries are from the sample application logged in as a user with <code>(GMT+06:00) Astana</code> timezone</p>

<p>```ruby</p>

<h1>WARNING: do not do this</h1>

<h1>events created yesterday</h1>

<p>yesterday = Date.current &ndash; 1.day
Event.where(&ldquo;DATE(created_at) = ?&rdquo;, yesterday)</p>

<h1>=> SELECT &ldquo;events&rdquo;.* FROM &ldquo;events&rdquo; WHERE (DATE(created_at) = &lsquo;2013-11-14&rsquo;)</h1>

<h1>=> 0 records</h1>

<p>```</p>

<p>the proper way</p>

<p>```ruby</p>

<h1>events created yesterday</h1>

<p>start_at = (Date.current &ndash; 1.day).beginning_of_day
end_at = start_at.end_of_day
@events_from_yesterday = Event.where(&ldquo;created_at BETWEEN ? AND ?&rdquo;, start_at, end_at)</p>

<h1>=> SELECT &ldquo;events&rdquo;.* FROM &ldquo;events&rdquo; WHERE (created_at BETWEEN &lsquo;2013-11-13 18:00:00&rsquo; AND &lsquo;2013-11-14 17:59:59&rsquo;)</h1>

<h1>=> 12 records</h1>

<p>```</p>

<blockquote><p>This is not an issue when filtering on date columns (only datetime).</p></blockquote>

<p>```ruby</p>

<h1>rails will do it for us, Date.current is timezone aware</h1>

<p>Meeting.where(&ldquo;scheduled_on = ?&rdquo;, Date.current)</p>

<h1>but do NOT do this, will not work correctly at certain times of the day</h1>

<p>Meeting.where(&ldquo;scheduled_on = ?&rdquo;, Date.today)
```</p>

<p>In some situations you might need to query for data based on a specific timezone</p>

<p>```ruby
@corp_office = OpenStruct.new({ time_zone: &ldquo;Eastern Time (US &amp; Canada)&rdquo; })</p>

<p>Time.use_zone(@corp_office.time_zone) do
  start_at = Date.current.beginning_of_day
  end_at = start_at.end_of_day
  @events_scheduled_today = Event.where(&ldquo;start_at BETWEEN ? AND ?&rdquo;, start_at, end_at).order(:start_at)
end</p>

<h1>=> SELECT &ldquo;events&rdquo;.* FROM &ldquo;events&rdquo; WHERE (start_at BETWEEN &lsquo;2013-11-13 05:00:00&rsquo; AND &lsquo;2013-11-14 04:59:59&rsquo;) ORDER BY &ldquo;events&rdquo;.&ldquo;start_at&rdquo; ASC</h1>

<p>```</p>

<h2>Conclusion</h2>

<p>I hope you found this article helpful. All feedback is welcome &ndash; I am sure I have left out some key information or just plain got it wrong.</p>

<p>Additional Reading: <a href="http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails">http://www.elabs.se/blog/36-working-with-time-zones-in-ruby-on-rails</a></p>

<h2>ETC&hellip; (links and resources)</h2>

<p><code>
rake time:zones:all
</code></p>

<p><code>
ActiveSupport::TimeZone.zones_map
ActiveSupport::TimeZone.us_zones
</code></p>

<ul>
<li>API: <a href="http://api.rubyonrails.org/classes/DateTime.html">DateTime</a></li>
<li>API: <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select">time_zone_select</a></li>
<li>Stackoverflow: <a href="http://stackoverflow.com/questions/19664652/timezone-confusion-in-ruby-on-rails-4-0-postgres">Timezone confusion</a></li>
<li>Stackoverflow: <a href="http://stackoverflow.com/questions/17818329/rails-3-timezone-confusions/17840938#17840938">More timezone confusion</a></li>
<li>Postgresql: <a href="http://www.postgresql.org/docs/9.3/static/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT">AT TIME ZONE</a></li>
<li><a href="https://github.com/rails/rails/issues/9610">datetime_select preselects wrong times upon edit</a></li>
</ul>


<p>```
Good naming conventions for date and datetime (your milage may vary)</p>

<p>datetime: should end in _at (created_at, updated_at, start_at, end_at)</p>

<pre><code>date: should end in _on (start_on, end_on, work_on)
</code></pre>

<p>```</p>

<p>See also: <a href="/blog/2014/12/13/rails-timezones-javascript-and-moment-js/">Rails, timezones, javascript and moment.js</a></p>
]]></content>
  </entry>
  
</feed>
