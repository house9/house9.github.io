<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | house9]]></title>
  <link href="http://jessehouse.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jessehouse.com/"/>
  <updated>2019-06-19T15:18:13-07:00</updated>
  <id>http://jessehouse.com/</id>
  <author>
    <name><![CDATA[Jesse House]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActionView::Template::Error: wrong number of arguments (given 2, expected 1)]]></title>
    <link href="http://jessehouse.com/blog/2019/06/19/actionview-template-error-wrong-number-of-arguments-given-2/"/>
    <updated>2019-06-19T14:35:00-07:00</updated>
    <id>http://jessehouse.com/blog/2019/06/19/actionview-template-error-wrong-number-of-arguments-given-2</id>
    <content type="html"><![CDATA[<p>I have recently been checking out rails-6.0.0.rc1. I immediatly ran into an issue when trying to run controller specs with <a href="https://github.com/rspec/rspec-rails">rspec-rails</a>.</p>

<p>Running any controller spec would error with:</p>

<p>```
rspec spec/controllers/home_controller_spec.rb</p>

<p>Failures:</p>

<p>  1) HomeController GET #index returns http success</p>

<pre><code> Failure/Error: get :index

 ActionView::Template::Error:
   wrong number of arguments (given 2, expected 1)
 # ./spec/controllers/home_controller_spec.rb:7:in `block (3 levels) in &lt;top (required)&gt;'
 # ------------------
 # --- Caused by: ---
 # ArgumentError:
 #   wrong number of arguments (given 2, expected 1)
 #   ./spec/controllers/home_controller_spec.rb:7:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.03078 seconds (files took 1.66 seconds to load)
1 example, 1 failure
```</p>

<p>After searching for a bit I found the answer on a github issue, tried to find it again and could not otherwise I would link it here.</p>

<p>My co-worker ran into the same issue so I figured it was time to write a blog post.</p>

<p>The fix: use rspec-rails 4 which is currently in development, modify your Gemfile like so:</p>

<p><code>
group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  gem 'rspec-core', git: 'https://github.com/rspec/rspec-core'
  gem 'rspec-expectations', git: 'https://github.com/rspec/rspec-expectations'
  gem 'rspec-mocks', git: 'https://github.com/rspec/rspec-mocks'
  gem 'rspec-rails', git: 'https://github.com/rspec/rspec-rails', branch: '4-0-dev'
  gem 'rspec-support', git: 'https://github.com/rspec/rspec-support'
end
</code></p>

<p>and then bundle, re-run the specs</p>

<p>```
rspec spec/controllers/home_controller_spec.rb</p>

<p>Finished in 0.01668 seconds (files took 2.14 seconds to load)
1 example, 0 failures
```</p>

<p>Life is good again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save a ruby hash as a json file]]></title>
    <link href="http://jessehouse.com/blog/2017/03/26/save-a-ruby-hash-as-a-json-file/"/>
    <updated>2017-03-26T12:24:00-07:00</updated>
    <id>http://jessehouse.com/blog/2017/03/26/save-a-ruby-hash-as-a-json-file</id>
    <content type="html"><![CDATA[<p>Save a ruby hash as a json file</p>

<p>I have found the following technique useful when debugging json structures generated from ruby hashes.</p>

<p>```
some_json = {
  some_attribute: &lsquo;SOME_DATA&rsquo;
}</p>

<p>IO.write &ldquo;tmp/some_json-#{SecureRandom.hex(2)}.json&rdquo;, JSON.pretty_generate(some_json)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[upgrading from rspec 2 to rspec 3]]></title>
    <link href="http://jessehouse.com/blog/2015/03/19/upgrading-from-rspec-2-to-rspec-3/"/>
    <updated>2015-03-19T16:42:00-07:00</updated>
    <id>http://jessehouse.com/blog/2015/03/19/upgrading-from-rspec-2-to-rspec-3</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the last few days upgrading a rails application from 4.1 to 4.2 and as part of the upgrade going from rspec 2.99 to 3.2.</p>

<p>The rspec upgrade was much easier than I had anticipated thanks to the <a href="https://github.com/yujinakayama/transpec">transpec</a> <a href="https://rubygems.org/gems/transpec">gem</a>.</p>

<ul>
<li>added the <a href="https://github.com/rspec/rspec-its">rspec-its</a> <a href="https://rubygems.org/gems/rspec-its">gem</a> to my Gemfile</li>
<li>then ran the transpec migration</li>
</ul>


<p><code>
gem install transpec
transpec --keep its --negative-form to_not
rspec spec
git commit -aeF .git/COMMIT_EDITMSG
</code></p>

<p>Only a few minor tweaks were needed to my specs after the migration &ndash; the transpec is brilliant!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Mac OS X for rails development]]></title>
    <link href="http://jessehouse.com/blog/2015/02/02/setup-mac-os-x-for-rails-development/"/>
    <updated>2015-02-02T09:33:00-08:00</updated>
    <id>http://jessehouse.com/blog/2015/02/02/setup-mac-os-x-for-rails-development</id>
    <content type="html"><![CDATA[<p>Whenever I get new machine or re-install my OS I like to use pivotals <a href="https://github.com/pivotal-sprout/sprout-wrap">sprout-wrap</a> for the setup. I have been through the process many times and finally documented it back in October.</p>

<p>From the app store install XCode</p>

<ul>
<li>open XCode and accept the terms, then close app</li>
<li>from the terminal run: <code>xcode-select --install</code></li>
<li>copy ssh keys from old machine via airdrop</li>
<li>then install sprout-wrap dependencies using the built in version of Ruby that ships with Mac OS X:</li>
</ul>


<p><code>
sudo gem install soloist
sudo gem install bundler
mkdir installs
cd installs
git clone https://github.com/pivotal-sprout/sprout-wrap.git
cd sprout-wrap
sudo bundle
</code></p>

<p>Modify the <code>soloistrc</code> file if desired; for me that means adding &lsquo;sourcetree&rsquo;, &lsquo;hipchat&rsquo; and a few others to the casks section.</p>

<p>The full list of available casks are here: <a href="https://github.com/pivotal-sprout/sprout-osx-apps/tree/master/recipes">https://github.com/pivotal-sprout/sprout-osx-apps/tree/master/recipes</a></p>

<p>You probably want to change the &lsquo;Energy Saver&rsquo; settings to never while the installs are running.</p>

<p><code>bundle exec soloist</code></p>

<p>Enter your password after prompted and then watch the magic happen&hellip;</p>

<p>A few hours later, after sprout-wrap is done; time for a few more &lsquo;manual&rsquo; installs</p>

<ul>
<li><a href="https://github.com/carlhuda/janus">janus</a> for vim configuration (i dont' use vim much but occasionally pair with people who do)</li>
<li>Clone personal dotfiles</li>
<li>install some firefox add ons</li>
<li>For chrome once I login to Google all of my add ons will auto install</li>
<li>Install <a href="http://www.sublimetext.com/3">SublimeText3</a> and <a href="https://packagecontrol.io/installation">Package Control</a>

<ul>
<li>If you prefer SublimeText2 it is available as a cask and can be installed via soloist</li>
</ul>
</li>
</ul>


<blockquote><p>then Encrypt your hard drive using FileVault2</p></blockquote>

<p>Done! :)</p>

<hr />

<p><em>NOTE: if you install sprout-wrap with defaults it will configure many os-x settings which you may or may not like; I personally do like them, especially the &lsquo;Fast Key Repeat Rate&rsquo;.</em></p>

<p>This post originally appeared on the private discussion board <a href="http://parley.rubyrogues.com/">Ruby Rogues Parley</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, timezones, javascript and moment.js]]></title>
    <link href="http://jessehouse.com/blog/2014/12/13/rails-timezones-javascript-and-moment-js/"/>
    <updated>2014-12-13T10:33:00-08:00</updated>
    <id>http://jessehouse.com/blog/2014/12/13/rails-timezones-javascript-and-moment-js</id>
    <content type="html"><![CDATA[<p>So you need to display some datetimes in your new ember.js/angular/backbone UI and the times must be displayed for a timezone which is different from the logged on user.</p>

<p>Let us say we have an <code>Event</code> class in our rails application with the following attributes:</p>

<p><code>ruby
create_table :events do |t|
  t.string :event_name, null: false
  t.text :description
  t.datetime :start_at, null: false
  t.string :time_zone, null: false, default: 'UTC'
end
</code></p>

<p>Rails uses the timezone format: <code>Eastern Time (US &amp; Canada)</code></p>

<p>Javascript (and therefore the <a href="http://momentjs.com/timezone/">moment-timezone</a> library) use <a href="http://en.wikipedia.org/wiki/Tz_database">the format</a>: <code>America/New_York</code></p>

<p>Rails can easily convert this for you and return the proper js format in your json:</p>

<p>```ruby
class Event &lt; ActiveRecord::Base
  # &hellip;</p>

<p>  def time_zone_mapping</p>

<pre><code># time_zone =&gt; Eastern Time (US &amp; Canada)
ActiveSupport::TimeZone::MAPPING[self.time_zone] # =&gt; America/New_York
</code></pre>

<p>  end
end
```</p>

<p>and with <a href="http://momentjs.com/">moment.js</a> and <a href="http://momentjs.com/timezone/">moment-timezone</a></p>

<p><code>javascript
// where 'event' is the js representation of your rails model
moment(event.startAt).tz(event.timeZoneMapping).format('dddd, MMMM Do YYYY h:mm a z');
</code></p>

<p>You will want to ensure that all json is being rendered with <code>UTC</code> as the configured timezone in rails,
i.e. <code>config.time_zone = 'UTC'</code> in your application config and/or <code>Time.zone = 'UTC'</code> in your api controller.</p>

<p>See also</p>

<ul>
<li><a href="/blog/2013/11/15/working-with-timezones-and-ruby-on-rails/">Ruby on Rails: Timezones</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html">ActiveSupport::TimeZone</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
